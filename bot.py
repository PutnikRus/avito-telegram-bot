import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω —Ç–æ—á–Ω–æ –±—ã–ª
if not TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# üß† –•—Ä–∞–Ω–∏–º, –∫–æ–º—É –∏–º–µ–Ω–Ω–æ –∞–¥–º–∏–Ω —Ö–æ—á–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å
current_replies = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_command(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ê–≤–∏—Ç–æ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text)
async def handle_message(msg: Message):
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ‚Äî —ç—Ç–æ –æ—Ç–≤–µ—Ç?
    if str(msg.chat.id) == str(ADMIN_CHAT_ID):
        user_id = current_replies.get(msg.from_user.id)
        if user_id:
            await bot.send_message(chat_id=user_id, text=msg.text)
            await msg.answer("‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            await msg.answer("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –∫–æ–º—É –æ—Ç–≤–µ—Ç–∏—Ç—å.")
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{msg.from_user.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_reply")
        ]
    ])
    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:</b> {msg.from_user.full_name}\n\n{msg.text}",
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∞
@dp.message(F.photo)
async def handle_photo(msg: Message):
    if str(msg.chat.id) == str(ADMIN_CHAT_ID):
        user_id = current_replies.get(msg.from_user.id)
        if user_id:
            await bot.send_photo(chat_id=user_id, photo=msg.photo[-1].file_id, caption=msg.caption)
            await msg.answer("üì∑ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            await msg.answer("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
        return

    # –§–æ—Ç–æ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{msg.from_user.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_reply")
        ]
    ])
    await bot.send_photo(
        chat_id=ADMIN_CHAT_ID,
        photo=msg.photo[-1].file_id,
        caption=f"<b>–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç:</b> {msg.from_user.full_name}",
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@dp.callback_query(F.data.startswith("reply_"))
async def handle_reply(callback: CallbackQuery):
    target_user_id = int(callback.data.split("_")[1])
    current_replies[callback.from_user.id] = target_user_id
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
@dp.callback_query(F.data == "cancel_reply")
async def cancel_reply(callback: CallbackQuery):
    current_replies.pop(callback.from_user.id, None)
    await callback.message.answer("‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
    await callback.answer()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)
